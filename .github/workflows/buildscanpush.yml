name: OCI Security Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
# Setup    
      - name: Setup Nix
        uses: cachix/install-nix-action@v25
        with:
            nix_path: nixpkgs=channel:nixos-unstable
    
      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
            name: ksvnixcachix
            authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Restore Trivy cache
        uses: actions/cache/restore@v4
        with:
            path: .trivycache
            key: trivy-db-cache
            restore-keys: |
                trivy-db-cache-
# Build      
      - name: Build OCI image
        run: |
          nix build .#dockerLayered
    
      - name: Create Trivy output directory
        run: |
          mkdir -p trivy-reports
# Scan
      - name: Trivy Vuln scan
        run: |
            nix shell nixpkgs#trivy --command \
            trivy image \
            --input result \
            --scanners vuln \
            --severity CRITICAL,HIGH \
            --exit-code 1 \
            --ignore-unfixed \ 
            --format sarif \
            --output trivy-reports/vuln.sarif \
            --timeout 5m \
            --cache-dir .trivycache \
            --ignorefile .trivyignore \
            --no-progress \
            --skip-db-update #--offline-scan
    
      - name: Trivy Secret scan
        run: |
            nix shell nixpkgs#trivy --command \
            trivy image \
            --input result \
            --scanners secret \
            --severity CRITICAL,HIGH,MEDIUM \
            --exit-code 1 \
            --ignore-unfixed \ 
            --format sarif \
            --output trivy-reports/secret.sarif \
            --timeout 5m \
            --cache-dir .trivycache \
            --ignorefile .trivyignore \
            --no-progress \
            --skip-db-update #--offline-scan
        
      - name: Trivy Config scan
        run: |
            nix shell nixpkgs#trivy --command \
            trivy image \
            --input result \
            --scanners config \
            --severity CRITICAL,HIGH,MEDIUM \
            --exit-code 1 \
            --ignore-unfixed \ 
            --format sarif \
            --output trivy-reports/config.sarif \
            --timeout 5m \
            --cache-dir .trivycache \
            --ignorefile .trivyignore \
            --no-progress \
            --skip-db-update #--offline-scan

      - name: Upload combined SARIF files for GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
            sarif_file: trivy-reports/
# Scan reports upload
      - name: Upload raw sarif reports as artifact
        uses: actions/upload-artifact@v4
        with:
            name: trivy-reports
            path: trivy-reports/

# Inspect image size and push
      - name: Skopeo inspect image
        if: success() && github.event_name == 'push'
        run: |
          nix shell nixpkgs#skopeo --command \
            skopeo inspect docker-archive:result > image_metadata.json
      - name: Check image size - fail if too large
        if: success() && github.event_name == 'push'
        run: |
          IMAGE_SIZE=$(jq '.LayersData | map(.Size) | add' image_metadata.json)
          if [ $IMAGE_SIZE -gt 500000000 ]; then
            echo "Image exceeds 500MB limit. Please optimize."
            exit 1
          fi

# Push to ghcr
      - name: image push to ghcr with skopeo
        if: success() && github.event_name == 'push'
        run: |
              nix shell nixpkgs#skopeo --command \
                skopeo copy \
                --dest-creds ${{ github.actor }}:${{ secrets.GHCR_TOKEN }} \
                --format=oci \
                docker-archive:result \
                docker://ghcr.io/${{ github.actor }}/ksv-nix-workflow:${{ github.sha }}